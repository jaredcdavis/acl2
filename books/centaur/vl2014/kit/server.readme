------------------------------------------------------------------------------

                             VL SERVER README

------------------------------------------------------------------------------

The VL Server is the backend for the VL Module Browser, a web-based tool for
browsing through Verilog designs.


SECURITY WARNING

  The server has NO AUTHENTICATION MECHANISM.  Anyone who can see your machine
  on the network can browse your Verilog modules.  Moreover, the module browser
  software MAY HAVE SECURITY VULNERABILITIES that could allow an attacker to
  gain access to your computer.

  You should ONLY run the module browser after first consulting your network
  administrator to ensure that appropriate firewalls are in place.  You should
  NEVER run the module browser on an untrusted network (e.g., the internet).

  IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
  DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
  OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE
  OR OTHER DEALINGS IN THE SOFTWARE.


PREREQUISITES

  OS/Lisp. The server has been tested on CCL on 64-bit Linux.  Other Lisps will
  definitely not work.  Other operating systems have not been tested.

  Memory. We typically run the server on machines with 32 GB of memory or more.
  For smaller designs you may not need so much memory.  See the --mem argument.

  Software. The server provides its own web server via the Common Lisp library
  Hunchentoot.  No additional software should be necessary beyond the VL
  executable and a web browser.


SETUP

  The Module Browser operates on the "model.sao" files that are created by the
  VL model command.  For information on how to create these data files, see:

     vl model --help

  The Module Browser lets you browse through multiple designs.  To support
  this, the server expects to be pointed to a "root" directory that should be
  organized like this:

                           root/
                            |
                      +-----+----+-----------+---------+-----------+
                      |          |           |         |           |
                     dir1/      dir2/       dir3/     ...         dirN/
                      |          |           |                     |
                      |         ...         ...                    ...
                      |
                 +----+--------+-----------+------------+
                 |             |           |            |
               model1/       model2/      ...         modelK/
                 |             |                        |
         +-------+-----+      ...               +-------+-----+
         |             |                        |             |
     model.sao   model.sao.ver              model.sao      model.sao.ver

  For example, here is a contrived translations directory for a company that
  makes nightly translations of a processor, chipset, and graphics card design.

                 translations/
                      |
                +-----+----+-----------+---------+--------+
                |          |           |         |        |
           2014-01-01   2014-01-02   2014-01-03 ...   2014-12-31
                |          |           |                  |
                |         ...         ...                ...
                |
           +----+-----------+----------------+
           |                |                |
        processor/        chipset/        graphics/
           |                |                |
        model.sao,       model.sao,        model.sao,
        model.sao.ver    model.sao.ver     model.sao.ver

  The server will automatically rescan this directory (approximately once per
  minute) for new translations.

  Long story short: to get started you should do something like this:

      $ vl model ...     # to create a model.sao file
      $ mkdir -p translations/dir1/model1
      $ cp model.sao model.sao.ver translations/dir1/model1
      $ vl server --root ./translations

  And from then on you can run additional "vl model" commands to create other
  model.sao files, and just add them into the right places.

  Once the server is started, you can just point your web browser to, e.g.,

    http://localhost:12123/


Happy module browsing!

------------------------------------------------------------------------------
